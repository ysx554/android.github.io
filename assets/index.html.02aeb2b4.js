import{_ as e,o as t,c as a,e as n}from"./app.2d594a2a.js";const s={},p=n(`<h1 id="body-temperature" tabindex="-1"><a class="header-anchor" href="#body-temperature" aria-hidden="true">#</a> Body Temperature</h1><h2 id="sets-listener-of-temperature-measurement-results" tabindex="-1"><a class="header-anchor" href="#sets-listener-of-temperature-measurement-results" aria-hidden="true">#</a> Sets listener of temperature measurement results</h2><p>Sets the monitoring of body temperature measurement results to return the corresponding data of body temperature.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>tempChangeEveStm<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token class-name">TempChangeBean</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/// Do something with new state,for example:</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">case</span> <span class="token class-name">TempChangeType</span><span class="token punctuation">.</span>continueState<span class="token punctuation">:</span>
                _enable <span class="token operator">=</span> event<span class="token punctuation">.</span>enable<span class="token operator">!</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> <span class="token class-name">TempChangeType</span><span class="token punctuation">.</span>measureTemp<span class="token punctuation">:</span>
                _temp <span class="token operator">=</span> event<span class="token punctuation">.</span>temp<span class="token operator">!</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> <span class="token class-name">TempChangeType</span><span class="token punctuation">.</span>measureState<span class="token punctuation">:</span>
                _state <span class="token operator">=</span> event<span class="token punctuation">.</span>state<span class="token operator">!</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> <span class="token class-name">TempChangeType</span><span class="token punctuation">.</span>continueTemp<span class="token punctuation">:</span>
                _tempInfo <span class="token operator">=</span> event<span class="token punctuation">.</span>tempInfo<span class="token punctuation">;</span>
                _tempTimeType <span class="token operator">=</span> _tempInfo<span class="token operator">!</span><span class="token punctuation">.</span>tempTimeType<span class="token operator">!</span><span class="token punctuation">;</span>
                _startTime <span class="token operator">=</span> _tempInfo<span class="token operator">!</span><span class="token punctuation">.</span>startTime<span class="token operator">!</span><span class="token punctuation">;</span>
                _tempList <span class="token operator">=</span> _tempInfo<span class="token operator">!</span><span class="token punctuation">.</span>tempList<span class="token operator">!</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Callback Description(event):</p><p>TempChangeBean\uFF1A</p><table><thead><tr><th>callback value</th><th>callback value type</th><th>callback value description</th></tr></thead><tbody><tr><td>type</td><td>int</td><td>Get the corresponding return value according to type, where type is the value corresponding to TempChangeType</td></tr><tr><td>enable</td><td>bool</td><td>whether to continue measuring true:enable false:disable</td></tr><tr><td>temp</td><td>double</td><td>real-time body temperature</td></tr><tr><td>state</td><td>bool</td><td>temperature measurement status true:measuring false:end of measurement</td></tr><tr><td>tempInfo</td><td>TempInfo</td><td>Body temperature information</td></tr></tbody></table><p>TempChangeType\uFF1A</p><table><thead><tr><th>type</th><th>value</th><th>value description</th></tr></thead><tbody><tr><td>continueState</td><td>1</td><td>Continue to measure body temperature</td></tr><tr><td>measureTemp</td><td>2</td><td>Start measuring the temperature obtained by taking the temperature</td></tr><tr><td>measureState</td><td>3</td><td>measure body temperature</td></tr><tr><td>continueTemp</td><td>4</td><td>The temperature value obtained by continuing to measure the body temperature</td></tr></tbody></table><p>TempInfo</p><table><thead><tr><th>callback value</th><th>callback value type</th><th>callback value description</th></tr></thead><tbody><tr><td>type</td><td>TempTimeType</td><td>Body temperature timing measurement status.</td></tr><tr><td>startTime</td><td>long</td><td>Temperature measurement start time</td></tr><tr><td>tempList</td><td>List&lt; Float &gt;</td><td>Temperature record sheet</td></tr><tr><td>measureInterval</td><td>int</td><td>Measurement interval (unit: minute, default 30 minutes)</td></tr></tbody></table><p>TempTimeType:</p><table><thead><tr><th>type</th><th>value type</th><th>value</th></tr></thead><tbody><tr><td>today</td><td>String</td><td>&quot;TODAY&quot;</td></tr><tr><td>yesterday</td><td>String</td><td>&quot;YESTERDAY&quot;</td></tr></tbody></table><h2 id="start-measuring-once-temperature" tabindex="-1"><a class="header-anchor" href="#start-measuring-once-temperature" aria-hidden="true">#</a> Start measuring once temperature</h2><p>Start taking temperature.</p><p>When starting a temperature measurement. The query result will be obtained through the tempChangeEveStm monitoring stream, the return type is TempChangeBean, and the real-time body temperature and measurement status are TempChangeBean.temp and TempChangeBean.state,type ismeasureTemp and type is measureState Respectively.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>startMeasureTemp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="stop-measuring-once-temperature" tabindex="-1"><a class="header-anchor" href="#stop-measuring-once-temperature" aria-hidden="true">#</a> Stop measuring once temperature</h2><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>stopMeasureTemp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="enable-timing-temperature-measurement" tabindex="-1"><a class="header-anchor" href="#enable-timing-temperature-measurement" aria-hidden="true">#</a> Enable timing temperature measurement</h2><p>When the chronograph measurement is turned on, the watch automatically measures the temperature every half an hour.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>enableTimingMeasureTemp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="disable-timing-temperature-measurement" tabindex="-1"><a class="header-anchor" href="#disable-timing-temperature-measurement" aria-hidden="true">#</a> Disable timing temperature measurement</h2><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>disableTimingMeasureTemp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gets-the-timing-of-temperature-measurement-status" tabindex="-1"><a class="header-anchor" href="#gets-the-timing-of-temperature-measurement-status" aria-hidden="true">#</a> Gets the timing of temperature measurement status</h2><p>Get the temperature measurement status. The query result will be obtained through the tempChangeEveStm monitoring stream, the type is measureState, and the measurement state is TempChangeBean.state.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token class-name">String</span> timingTempState <span class="token operator">=</span> <span class="token keyword">await</span> _blePlugin<span class="token punctuation">.</span>queryTimingMeasureTempState<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gets-the-result-of-timing-temperature-measurement" tabindex="-1"><a class="header-anchor" href="#gets-the-result-of-timing-temperature-measurement" aria-hidden="true">#</a> Gets the result of timing temperature measurement</h2><p>The measurement state is obtained through tempChangeEveStm, and the result is stored in TempChangeBean.continueTemp.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span><span class="token function">queryTimingMeasureTemp</span><span class="token punctuation">(</span><span class="token class-name">TempTimeType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,30),r=[p];function i(u,o){return t(),a("div",null,r)}var l=e(s,[["render",i],["__file","index.html.vue"]]);export{l as default};
