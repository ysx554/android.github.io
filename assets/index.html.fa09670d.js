import{_ as t,o as e,c as a,e as n}from"./app.2d594a2a.js";const s={},c=n(`<h2 id="battery" tabindex="-1"><a class="header-anchor" href="#battery" aria-hidden="true">#</a> Battery</h2><h2 id="sets-device-battery-listener" tabindex="-1"><a class="header-anchor" href="#sets-device-battery-listener" aria-hidden="true">#</a> Sets device battery listener</h2><p>Sets the watch battery monitoring stream deviceBatteryEveStm to return data about the watch battery.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>deviceBatteryEveStm<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token class-name">DeviceBatteryBean</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Do something with new state,for example:</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">DeviceBatteryType</span><span class="token punctuation">.</span>deviceBattery<span class="token punctuation">:</span>
     		  _deviceBattery <span class="token operator">=</span> event<span class="token punctuation">.</span>deviceBattery<span class="token operator">!</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">DeviceBatteryType</span><span class="token punctuation">.</span>subscribe<span class="token punctuation">:</span>
              _subscribe <span class="token operator">=</span> event<span class="token punctuation">.</span>subscribe<span class="token operator">!</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Callback Description:</p><table><thead><tr><th>callback value</th><th>callback value type</th><th>callback value description</th></tr></thead><tbody><tr><td>type</td><td>int</td><td>Gets the type of the callback return value, where Type is the value corresponding to DeviceBatteryType</td></tr><tr><td>subscribe</td><td>bool</td><td>Whether the battery subscription is successful</td></tr><tr><td>deviceBattery</td><td>int</td><td>watch battery</td></tr></tbody></table><p>DeviceBatteryType:</p><table><thead><tr><th>type</th><th>value</th><th>value description</th></tr></thead><tbody><tr><td>subscribe</td><td>1</td><td>Data that represents a power subscription listening callback</td></tr><tr><td>deviceBattery</td><td>2</td><td>Represents the data for the power monitor callback</td></tr></tbody></table><h2 id="gets-device-battery" tabindex="-1"><a class="header-anchor" href="#gets-device-battery" aria-hidden="true">#</a> Gets device battery</h2><p>Gets the current battery of the watch. When the battery level of the watch exceeds 100, it means the watch is charging.</p><p>The result is returned through the data stream deviceBatteryEveStm and stored in the deviceBattery field in &quot;event&quot;.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>queryDeviceBattery<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="subscription-battery" tabindex="-1"><a class="header-anchor" href="#subscription-battery" aria-hidden="true">#</a> Subscription battery</h2><p>When the battery of the watch changes, the result is returned through the data stream deviceBatteryEveStm and saved in the subscribe field in &quot;event&quot;.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>_blePlugin<span class="token punctuation">.</span>subscribeDeviceBattery<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),i=[c];function p(r,d){return e(),a("div",null,i)}var l=t(s,[["render",p],["__file","index.html.vue"]]);export{l as default};
